<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
	            http://www.springframework.org/schema/util
	            http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!-- 配置bean -->
    <!--
        id：给bean起名，该值在Spring配置文件里面是唯一的，不能重复
        class：设置bean的全类名，Spring会利用反射来对bean进行实例化
    -->
    <!-- setter方法注入 -->
    <bean id="helloWorld" class="com.ly.spring.helloworld.HelloWorld">
        <!-- 通过property标签给bean的属性进行赋值 -->
        <property name="name" value="Spring_Learning"></property>
    </bean>

    <!-- setter方法注入 -->
    <!-- 在初始化IOC容器时会调用bean的无参的构造器创建对象，然后调用setter方法对属性进行赋值 -->
    <bean id="book" class="com.ly.spring.beans.Book">
        <property name="id" value="1"></property>
        <property name="title">
            <value><![CDATA[<三国演义>]]></value>
        </property>
        <property name="author" value="罗贯中"></property>
        <property name="price" value="120"></property>
        <property name="sales" value="1000"></property>
    </bean>

    <!--  构造方法注入 -->
    <bean id="book2" class="com.ly.spring.beans.Book">
        <!-- 通过constructor-arg标签为构造器中的参数赋值 -->
        <!-- 可以通过index属性来指定参数在构造器中的位置，索引值从0开始 -->
        <constructor-arg value="2"></constructor-arg>
        <constructor-arg value="施耐庵" index="2"></constructor-arg>
        <constructor-arg value="水浒传" index="1"></constructor-arg>
        <constructor-arg value="110.2"></constructor-arg>
        <constructor-arg value="1205"></constructor-arg>
    </bean>

    <bean id="book3" class="com.ly.spring.beans.Book">
        <!-- 通过constructor-arg标签为构造器中的参数赋值 -->
        <!-- 可以通过index属性来指定参数在构造器中的位置，索引值从0开始 -->
        <constructor-arg value="2"></constructor-arg>
        <constructor-arg value="施耐庵" index="2"></constructor-arg>
        <constructor-arg value="水浒传" index="1"></constructor-arg>
        <!-- 通过type属性指定参数在构造器中的类型 -->
        <constructor-arg value="110" type="java.lang.Integer"></constructor-arg>
    </bean>

    <!-- 引用其他bean -->
    <bean id="cartItem" class="com.ly.spring.beans.CartItem">
        <!-- 通过ref属性引用在IOC容器中配置的其他bean,ref值就是要引用的bean的id属性值 -->
        <property name="book" ref="book"></property>
        <!-- 给级联属性赋值 -->
        <property name="book.title" value="西游记"/>
        <property name="book.author" value="吴承恩"/>
        <property name="count" value="100"/>
        <property name="amount" value="1000"/>
    </bean>

    <!-- 配置内部bean -->
    <bean id="cartItem2" class="com.ly.spring.beans.CartItem">
        <!-- 配置内部bean，内部bean不能被其他bean引用，所以可以不指定id属性值 -->
        <property name="book">
            <bean class="com.ly.spring.beans.Book">
                <property name="id" value="6"></property>
                <property name="title" value="少年阿宾"></property>
                <property name="author" value="白洁"></property>
                <property name="price" value="50"></property>
                <property name="sales" value="664564"></property>
            </bean>
        </property>
        <property name="amount" value="4845"/>
        <property name="count" value="789456"/>
    </bean>

    <!-- 配置集合属性 -->
    <bean id="bookShop" class="com.ly.spring.beans.BookShop">
        <property name="list">
            <!--<list>-->
                <!--&lt;!&ndash; 引用外部的Book类型的bean &ndash;&gt;-->
                <!--<ref bean="book"/>-->
                <!--<ref bean="book2"/>-->
                <!--<ref bean="book3"/>-->
            <!--</list>-->
            <ref bean="refList"/>
        </property>
        <property name="map">
            <!--<map>-->
                <!--<entry key="book01" value-ref="book"></entry>-->
                <!--<entry key="book02" value-ref="book2"/>-->
            <!--</map>-->
            <ref bean="refMap"/>
        </property>
        <property name="properties">
            <!--<props>-->
                <!--<prop key="user">root</prop>-->
                <!--<prop key="password">root</prop>-->
                <!--<prop key="url">jdbc:mysql://localhost:3306/test</prop>-->
                <!--<prop key="driverClass">com.mysql.jdbc.Driver</prop>-->
            <!--</props>-->
            <ref bean="refProperty"/>
        </property>
    </bean>

    <!-- 通过util命名空间配置集合类型的bean -->
    <util:list id="refList">
        <ref bean="book"></ref>
        <ref bean="book2"/>
        <ref bean="book3"/>
    </util:list>

    <util:map id="refMap">
        <entry key="book01" value-ref="book"/>
        <entry key="book03" value-ref="book3"/>
    </util:map>

    <util:properties id="refProperty">
        <prop key="user">root</prop>
        <prop key="password">root</prop>
        <prop key="url">jdbc:mysql://localhost:3306/test</prop>
        <prop key="driver">com.mysql.jdbc.Driver</prop>
    </util:properties>

    <!-- 通过p命名空间来配置bean -->
    <bean id="book4" class="com.ly.spring.beans.Book"
        p:id="4"
        p:title="Java Core"
        p:author="java"
        p:price="105"
        p:sales="10000">
    </bean>

    <bean id="personal" class="com.ly.spring.beans.Personal">
        <property name="name" value="李炎"/>
        <property name="background" value="渣硕"/>
        <property name="major" value="计算机技术"/>
        <property name="college" value="USST"/>
    </bean>

    <bean id="personal2" class="com.ly.spring.beans.Personal">
        <property name="name" value="周茜"/>
        <property name="background" value="美丽的小姑娘"/>
        <property name="major" value="医学"/>
        <property name="college" value="南中医"/>
    </bean>

    <!-- 继承 -->
    <!-- 通过parent属性来指定继承的bean，被继承的bean被称为父bean -->
    <bean id="personal3" class="com.ly.spring.beans.Personal" parent="template_Personal">
        <!--<property name="name" value="Tony"/>-->
    </bean>

    <!-- 如果一个bean没有被指定class属性值，那么该bean的abstract属性必须为true，这样的bean被称为模板bean -->
    <bean id="template_Personal" abstract="true">
        <property name="name" value="小米"/>
        <property name="background" value="巨佬"/>
        <property name="major" value="计算机"/>
        <property name="college" value="武汉大学"/>
    </bean>

    <bean id="company" class="com.ly.spring.beans.Company">
        <property name="name" value="驴妈妈"/>
        <property name="industry" value="旅游行业"/>
    </bean>

    <bean id="company2" class="com.ly.spring.beans.Company">
        <property name="name" value="江苏省第二中医院"/>
        <property name="industry" value="医院"/>
    </bean>

    <bean id="company3" class="com.ly.spring.beans.Company">
        <property name="name" value="海康威视"/>
        <property name="industry" value="物联网"/>
    </bean>

    <bean id="offer" class="com.ly.spring.beans.Offer">
        <property name="personalMap">
            <ref bean="offerMap"/>
        </property>
        <property name="status" value="1"/>
    </bean>

    <util:map id="offerMap">
        <entry key-ref="company" value-ref="personal"/>
        <entry key-ref="company3" value-ref="personal"/>
        <entry key-ref="company2" value-ref="personal2"/>
    </util:map>

    <bean id="woman" class="com.ly.spring.beans.Woman" depends-on="man">
        <property name="name" value="周茜"/>
    </bean>

    <bean id="man" class="com.ly.spring.beans.Man">
        <property name="name" value="李炎"/>
    </bean>

    <!-- bean的作用域 -->
    <!--
        通过scope属性设置bean的作用域
            singleton：默认值，IOC容器一创建就实例化Spring配置文件中的所有bean，而且是单例的，每次获取的都是同一个对象
            prototype：IOC容器一创建就不再实例化Spring配置文件中的所有bean，只有在调用getBean()方法的时候才会创建bean实例，而且每调用一次创建新的对象
            request和session：与web中的request和session的范围一样
    -->
    <bean id="student" class="com.ly.spring.beans.Student" scope="singleton">
        <property name="name" value="测试bean的作用域"/>
    </bean>

    <!-- 配置数据源，连接数据库
        一般不在这边写死，不利于扩展，一般使用外部文件，也就是db.properties文件
     -->
    <!-- 数据库连接池 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--<property name="user" value="root"/>-->
        <!--<property name="password" value="601622"/>-->
        <!--<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/"/>-->
        <!--<property name="driverClass" value="com.mysql.jdbc.Driver"/>-->
    <!--</bean>-->

    <!-- 引入外部属性文件 -->
    <context:property-placeholder location="db.properties"></context:property-placeholder>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="initialPoolSize" value="${jdbc.initPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!-- bean的生命周期 -->
    <!--
        通过init-method属性指定初始化对象时调用的方法
        通过destroy-method属性指定对象销毁时调用的方法
     -->
    <bean id="beanLife" class="com.ly.spring.beans.BeanLife" init-method="init" destroy-method="destory">
        <property name="name" value="测试bean的生命周期"/>
    </bean>

    <!-- 配置bean的后置处理器，Spring会自动检测当前bean是一个后置处理器 -->
    <bean id="beanPostProcessor" class="com.ly.spring.beans.MyBeanPostProcessor"></bean>

    <!-- 通过静态工厂方法配置bean
        Spring IOC容器不会创建静态工厂实例
     -->
    <!-- 通过factory-method标签设置静态工厂 -->
    <bean id="staticFactory" class="com.ly.spring.beans.StaticFactory" factory-method="getBook">
        <!-- 通过constructor-arg标签设置方法中所需要传入的参数 -->
        <constructor-arg value="book01"></constructor-arg>
    </bean>

    <!-- 通过实例工厂方法配置bean
        Spring IOC容器会先创建实例工厂对象
     -->
    <!-- 配置实例工厂bean -->
    <bean id="instanceFactory" class="com.ly.spring.beans.InstanceFactory"></bean>
    <bean id="book5" class="com.ly.spring.beans.Book" factory-bean="instanceFactory" factory-method="getBook">
        <constructor-arg value="book03"/>
    </bean>

    <!-- 发过FactoryBean配置bean -->
    <bean id="myFactoryBean" class="com.ly.spring.beans.MyFactoryBean"></bean>


</beans>